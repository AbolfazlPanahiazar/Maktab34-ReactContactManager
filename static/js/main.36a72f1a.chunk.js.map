{"version":3,"sources":["Components/Header/Header.jsx","Components/SearchInput/SearchInput.jsx","Components/CotanctContainerHeder/CotanctContainerHeder.jsx","Components/ContactCard/ContactCard.jsx","Components/ContactContainerBody/ContactContainerBody.jsx","Components/AddContactForm/AddContactForm.jsx","Components/ContactCotainer/ContactContainer.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","className","SearchInput","props","onChange","searchInputHandler","value","searchInputValue","type","placeholder","CotanctContainerHeder","ContactCard","editId","setEditId","useState","contact","name","inputNameValue","setInputNameValue","phone","inputPhoneValue","setInputPhoneValue","src","alt","id","event","target","onClick","saveEditButtonHandler","deleteButtonHandler","ContactContainerBody","contacts","map","index","key","AddContactForm","nameInputValue","setNameInputValue","phoneInputValue","setPhoneInputValue","htmlFor","required","setAddNewMode","createNewContactHandler","ContactContainer","localContacts","JSON","parse","localStorage","getItem","setItem","stringify","setContacs","setSearchInputValue","filteredContacs","setFilteredContacs","addNewMode","useEffect","newFilteredContacts","filter","toLocaleLowerCase","includes","newContacts","newName","newPhone","newContact","theIndex","findIndex","Date","now","push","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.36a72f1a.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Header.scss\";\r\n\r\nfunction Header() {\r\n  return (\r\n    <header className=\"Header\">\r\n      <h1>Abolitionist ContactManager</h1>\r\n      <p>The best Contact Manager ever =)</p>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport \"./SearchInput.scss\";\r\n\r\nfunction SearchInput(props) {\r\n  return (\r\n    <input\r\n      onChange={props.searchInputHandler}\r\n      value={props.searchInputValue}\r\n      className=\"SearchInput\"\r\n      type=\"serach\"\r\n      placeholder=\"Looking for something...\"\r\n    />\r\n  );\r\n}\r\n\r\nexport default SearchInput;\r\n","import React from \"react\";\r\nimport \"./CotanctContainerHeder.scss\";\r\nimport SearchInput from \"../SearchInput/SearchInput\";\r\n\r\nfunction CotanctContainerHeder(props) {\r\n  return (\r\n    <div className=\"CotanctContainerHeder\">\r\n      <SearchInput searchInputHandler={props.searchInputHandler} searchInputValue={props.searchInputValue} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CotanctContainerHeder;\r\n","import React, { useState } from \"react\";\r\nimport \"./ContactCard.scss\";\r\n\r\nfunction ContactCard(props) {\r\n  const { editId, setEditId } = props;\r\n\r\n  const [inputNameValue, setInputNameValue] = useState(props.contact.name);\r\n  const [inputPhoneValue, setInputPhoneValue] = useState(props.contact.phone);\r\n\r\n  const nameInputChangeHandler = (event) => {\r\n    setInputNameValue(event.target.value);\r\n  };\r\n\r\n  const phoneInputChangeHandler = (event) => {\r\n    setInputPhoneValue(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <div className=\"ContactCard\">\r\n      <img className=\"ContactCard__image\" src={`./images/person5.jpg`} alt=\"profile\" />\r\n\r\n      {editId === props.contact.id ? (\r\n        <>\r\n          <input value={inputNameValue} onChange={nameInputChangeHandler} />\r\n          <input value={inputPhoneValue} onChange={phoneInputChangeHandler} />\r\n          <div className=\"ContactCard__buttons\">\r\n            <button className=\"ContactCard__buttons--cancell\" onClick={() => setEditId(0)}>\r\n              Cancell\r\n            </button>\r\n            <button\r\n              className=\"ContactCard__buttons--save\"\r\n              onClick={() => {\r\n                props.saveEditButtonHandler(props.contact.id, inputNameValue, inputPhoneValue);\r\n                setEditId(0);\r\n              }}\r\n            >\r\n              Save\r\n            </button>\r\n          </div>\r\n        </>\r\n      ) : (\r\n        <>\r\n          <span className=\"ContactCard__title\">{props.contact.name}</span>\r\n          <span className=\"ContactCard__number\">{props.contact.phone}</span>\r\n          <div className=\"ContactCard__buttons\">\r\n            <button className=\"ContactCard__buttons--delete\" onClick={() => props.deleteButtonHandler(props.contact.id)}>\r\n              Delete\r\n            </button>\r\n            <button className=\"ContactCard__buttons--edit\" onClick={() => setEditId(props.contact.id)}>\r\n              Edit\r\n            </button>\r\n          </div>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ContactCard;\r\n","import React, { useState } from \"react\";\r\nimport \"./ContactContainerBody.scss\";\r\nimport ContactCard from \"../ContactCard/ContactCard\";\r\n\r\nfunction ContactContainerBody(props) {\r\n  const [editId, setEditId] = useState(0);\r\n\r\n  return (\r\n    <div className=\"ContactContainerBody\">\r\n      {props.contacts.map((contact, index) => (\r\n        <ContactCard\r\n          key={index}\r\n          contact={contact}\r\n          deleteButtonHandler={props.deleteButtonHandler}\r\n          editId={editId}\r\n          setEditId={setEditId}\r\n          saveEditButtonHandler={props.saveEditButtonHandler}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ContactContainerBody;\r\n","import React, { useState } from \"react\";\r\nimport \"./AddContactForm.scss\";\r\n\r\nfunction AddContactForm(props) {\r\n  const [nameInputValue, setNameInputValue] = useState(\"\");\r\n\r\n  const [phoneInputValue, setPhoneInputValue] = useState(\"\");\r\n\r\n  const nameInputChangeHandler = (event) => {\r\n    setNameInputValue(event.target.value);\r\n  };\r\n\r\n  const phoneInputChangeHandler = (event) => {\r\n    setPhoneInputValue(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <form className=\"AddContactForm\">\r\n      <label htmlFor=\"nameInput\" className=\"AddContactForm__name\">\r\n        Name:\r\n        <input id=\"nameInput\" type=\"text\" placeholder=\"Enter the name\" onChange={nameInputChangeHandler} value={nameInputValue} required />\r\n      </label>\r\n      <label htmlFor=\"phoneInput\" className=\"AddContactForm__phone\">\r\n        Phone:\r\n        <input id=\"phoneInput\" type=\"text\" placeholder=\"Enter the phone number\" onChange={phoneInputChangeHandler} value={phoneInputValue} required />\r\n      </label>\r\n      <div className=\"AddContactForm__buttons\">\r\n        <button className=\"AddContactForm__buttons--cancell\" onClick={() => props.setAddNewMode(false)}>\r\n          Cancell\r\n        </button>\r\n        <button className=\"AddContactForm__buttons--add\" onClick={() => props.createNewContactHandler(nameInputValue, phoneInputValue)}>\r\n          Add\r\n        </button>\r\n      </div>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default AddContactForm;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport CotanctContainerHeder from \"../CotanctContainerHeder/CotanctContainerHeder\";\r\nimport ContactContainerBody from \"../ContactContainerBody/ContactContainerBody\";\r\nimport AddContactForm from \"../AddContactForm/AddContactForm\";\r\nimport \"./ContactContainer.scss\";\r\n\r\nfunction ContactContainer() {\r\n  const localContacts = JSON.parse(localStorage.getItem(\"qarxfdvgbfhu7yfjmvi\"));\r\n  if (!localContacts) localStorage.setItem(\"qarxfdvgbfhu7yfjmvi\", JSON.stringify([]));\r\n\r\n  const [contacts, setContacs] = useState(localContacts);\r\n\r\n  const [searchInputValue, setSearchInputValue] = useState(\"\");\r\n\r\n  const [filteredContacs, setFilteredContacs] = useState([...contacts]);\r\n\r\n  const [addNewMode, setAddNewMode] = useState(false);\r\n\r\n  const searchInputHandler = (event) => {\r\n    setSearchInputValue(event.target.value);\r\n  };\r\n\r\n  // useEffect(() => {\r\n  //   fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n  //     .then((response) => response.json())\r\n  //     .then((response) => {\r\n  //       const newContacts = [...contacts, ...response];\r\n  //       setContacs(newContacts);\r\n  //     });\r\n  // }, []);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(\"qarxfdvgbfhu7yfjmvi\", JSON.stringify(contacts));\r\n  }, [contacts]);\r\n\r\n  useEffect(() => {\r\n    const newFilteredContacts = contacts.filter((contact) => contact.name.toLocaleLowerCase().includes(searchInputValue.toLocaleLowerCase()));\r\n    setFilteredContacs(newFilteredContacts);\r\n  }, [searchInputValue, contacts]);\r\n\r\n  const deleteButtonHandler = (id) => {\r\n    let newContacts = [...contacts];\r\n    newContacts = newContacts.filter((contact) => contact.id !== id);\r\n    setContacs(newContacts);\r\n  };\r\n\r\n  const saveEditButtonHandler = (id, newName, newPhone) => {\r\n    const newContacts = JSON.parse(JSON.stringify(contacts));\r\n    const newContact = { id: id, name: newName, phone: newPhone };\r\n    const theIndex = newContacts.findIndex((contact) => contact.id === id);\r\n    newContacts[theIndex] = newContact;\r\n    setContacs(newContacts);\r\n  };\r\n\r\n  const createNewContactHandler = (newName, newPhone) => {\r\n    const newContacts = JSON.parse(JSON.stringify(contacts));\r\n    const newContact = { id: Date.now(), name: newName, phone: newPhone };\r\n    newContacts.push(newContact);\r\n    setContacs(newContacts);\r\n  };\r\n\r\n  return (\r\n    <main className=\"ContactContainer\">\r\n      <button className=\"ContactContainer__addButton\" onClick={() => setAddNewMode(true)}>\r\n        Add New Contact\r\n      </button>\r\n      <CotanctContainerHeder searchInputHandler={searchInputHandler} searchInputValue={searchInputValue} />\r\n      <ContactContainerBody contacts={filteredContacs} deleteButtonHandler={deleteButtonHandler} saveEditButtonHandler={saveEditButtonHandler} />\r\n      {addNewMode && <AddContactForm setAddNewMode={setAddNewMode} createNewContactHandler={createNewContactHandler} />}\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default ContactContainer;\r\n","import React from \"react\";\nimport Header from \"./Components/Header/Header\";\nimport ContactContainer from \"./Components/ContactCotainer/ContactContainer\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <ContactContainer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}